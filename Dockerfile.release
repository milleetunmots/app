FROM ruby:3.0.6-slim

ENV INSTALL_PATH /rails
ENV RAILS_ENV production
ENV RACK_ENV production
# monkey patch to avoid cryptographic error on compile
ENV NODE_OPTIONS=--openssl-legacy-provider
RUN mkdir -p $INSTALL_PATH
WORKDIR $INSTALL_PATH

# Install dependencies
RUN apt-get update \
  && apt-get install -qq -y --no-install-recommends \
    apt-transport-https \
    curl \
    wget \
    build-essential \
    git-core \
    gnupg \
    imagemagick \
    libfontconfig1 \
    libxrender1 \
    libxext6 \
    netcat \
    libpq-dev \
    file \
    git \
    libcurl4-openssl-dev \
    shared-mime-info \
  \
  # We need bundler
  && gem install bundler --no-document

RUN wget https://dl.yarnpkg.com/debian/pubkey.gpg
RUN curl https://deb.nodesource.com/setup_18.x | bash
RUN cat pubkey.gpg | apt-key add -
RUN echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list

RUN apt-get update && apt-get install -y nodejs yarn

# remove pubkey
RUN rm pubkey.gpg

# Copy the package.json as well as the yarn.lock and install
# the node modules. This is a separate step so the dependencies
# will be cached unless changes to one of those two files
# are made.
COPY package.json yarn.lock ./
RUN yarn install


# Copy the Gemfile as well as the Gemfile.lock and install
# the RubyGems. This is a separate step so the dependencies
# will be cached unless changes to one of those two files
# are made.
COPY Gemfile Gemfile.lock ./
RUN bundle install --without development test --jobs 20 --retry 5

# Allow wkhtmltopdf-binary to expand
RUN chmod o+w $(bundle show wkhtmltopdf-binary)/bin

# Copy the main application.
COPY . .
RUN rm -rf  \
  .rspec \
  .rubocop.yml \
  .ruby-version \
  coverage \
  docker-entrypoint.sh \
  docker-entrypoint.release.sh \
  log \
  spec \
  swagger

# Precompile Rails assets
RUN bundle exec rake SECRET_KEY_BASE=secret DATABASE_URL=nulldb://null ASSETS_PRECOMPILE=1 assets:precompile
RUN rm -rf \
  .browserslistrc \
  babel.config.js \
  package.json \
  postcss.config.js \
  yarn.lock \
  app/assets \
  lib/assets \
  node_modules \
  vendor/assets \
  tmp

# Expose port 3000 to the Docker host, so we can access it
# from the outside.
EXPOSE 3000

# An entrypoint to run migrations and so on
COPY docker-entrypoint.release.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

# Create a user with limited rights to run the app
RUN groupadd -g 2000 rails \
  && useradd -ms /bin/bash -u 2001 -g rails rails
# Give right to write on tmp
RUN mkdir tmp && chown rails:rails tmp
USER rails

# The main command to run when the container starts. Also
# tell the Rails dev server to bind to all interfaces by
# default.
CMD ["bundle exec rails server -p 3000 -b 0.0.0.0"]
