version: 2

jobs:
  test:
    working_directory: ~/rails
    docker:
      - image: leikir/ruby-bundler-node-yarn-and-extras:ruby-2.6.3-node-10.16.0-slim
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test
          DATABASE_URL: postgres://circleci-user@localhost:5432/circleci-db
      - image: circleci/postgres:11.3-alpine
        environment:
          POSTGRES_DB: circleci-db
          POSTGRES_USER: circleci-user
          POSTGRES_PASSWORD: ""
    steps:
      - checkout

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - rails-bundle-{{ checksum "Gemfile.lock" }}
            - rails-bundle-

      # Install gems
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: rails-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Wait for Docker PG container to be ready
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Load schema into the DB
      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace

      # Import Code Climate reporter script
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      # Tests
      - run:
          name: Run backend tests
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # Upload resultats to Code Climate
      - run:
          name: Format and upload coverage result to Code Climate
          command: |
            ./cc-test-reporter format-coverage -t simplecov -o coverage/codeclimate.json
            ./cc-test-reporter upload-coverage

      # Give metrics to CircleCI
      - store_test_results:
          path: test_results

  # Trigger build on Docker Hub
  build:
    machine:
      enabled: true
    steps:

      # Branch build
      - run:
          name: Trigger Docker Hub branch build
          command: |
            [[ ! -z "$CIRCLE_BRANCH" ]] && curl -H "Content-Type: application/json" --data "{\"source_type\": \"Branch\", \"source_name\": \"$(echo $CIRCLE_BRANCH | sed 's#/#_#g')\"}" -X POST "$DOCKER_HUB_TRIGGER_URL" || echo "Not a branch push"

      # Tag build
      - run:
          name: Trigger Docker Hub tag build
          command: |
            [[ ! -z "$CIRCLE_TAG" ]] && curl -H "Content-Type: application/json" --data "{\"source_type\": \"Tag\", \"source_name\": \"$(echo $CIRCLE_TAG | sed 's#/#_#g')\"}" -X POST "$DOCKER_HUB_TRIGGER_URL" || echo "Not a tag push"

workflows:
  version: 2

  commit:
    jobs:
      - test:
          filters:
            tags:
              only: /^v.*/
      - build:
          requires:
            - test
          filters:
            branches:
              only:
                - master
                - develop
                - /build\/.*/
            tags:
              only: /^v.*/
